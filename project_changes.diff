
project device/qcom/sepolicy_vndr/
diff --git a/generic/vendor/common/location.te b/generic/vendor/common/location.te
index 1dff035c..b7aa5b1c 100644
--- a/generic/vendor/common/location.te
+++ b/generic/vendor/common/location.te
@@ -65,5 +65,5 @@ userdebug_or_eng(`
 
 dontaudit vendor_location kernel:system module_request;
 
-# xtra-daemon control
-get_prop(vendor_location, xtra_control_prop)
+## xtra-daemon control
+#get_prop(vendor_location, xtra_control_prop)

project external/avb/
diff --git a/avbtool.py b/avbtool.py
index 05dc72c..9f3370d 100755
--- a/avbtool.py
+++ b/avbtool.py
@@ -4058,7 +4058,7 @@ def calc_fec_data_size(image_size, num_roots):
     ValueError: If output from the 'fec' tool is invalid.
   """
   p = subprocess.Popen(
-      ['fec', '--print-fec-size', str(image_size), '--roots', str(num_roots)],
+      ['/home/develop/android/pe/out/host/linux-x86/bin/fec', '--print-fec-size', str(image_size), '--roots', str(num_roots)],
       stdout=subprocess.PIPE,
       stderr=subprocess.PIPE)
   (pout, perr) = p.communicate()
@@ -4084,7 +4084,7 @@ def generate_fec_data(image_filename, num_roots):
   with tempfile.NamedTemporaryFile() as fec_tmpfile:
     try:
       subprocess.check_call(
-          ['fec', '--encode', '--roots', str(num_roots), image_filename,
+          ['/home/develop/android/pe/out/host/linux-x86/bin/fec', '--encode', '--roots', str(num_roots), image_filename,
            fec_tmpfile.name],
           stderr=open(os.devnull, 'wb'))
     except subprocess.CalledProcessError as e:

project frameworks/base/
diff --git a/core/java/android/hardware/fingerprint/FingerprintManager.java b/core/java/android/hardware/fingerprint/FingerprintManager.java
index 5c1da1112e2a..9b69d60a88c1 100644
--- a/core/java/android/hardware/fingerprint/FingerprintManager.java
+++ b/core/java/android/hardware/fingerprint/FingerprintManager.java
@@ -40,7 +40,9 @@ import android.annotation.TestApi;
 import android.app.ActivityManager;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.PackageManager;
+import android.content.SharedPreferences;
 import android.hardware.biometrics.BiometricAuthenticator;
 import android.hardware.biometrics.BiometricConstants;
 import android.hardware.biometrics.BiometricFingerprintConstants;
@@ -58,8 +60,11 @@ import android.os.IBinder;
 import android.os.IRemoteCallback;
 import android.os.Looper;
 import android.os.PowerManager;
+import android.os.PowerManager.WakeLock;
 import android.os.RemoteException;
+import android.os.SystemClock;
 import android.os.UserHandle;
+import android.provider.Settings;
 import android.security.identity.IdentityCredential;
 import android.security.identity.PresentationSession;
 import android.util.Slog;
@@ -1320,10 +1325,41 @@ public class FingerprintManager implements BiometricAuthenticator, BiometricFing
         }
     }
 
+    private void processUdfpsStatus() {
+        final PowerManager powerManager = mContext.getSystemService(PowerManager.class);   
+        if (!powerManager.isScreenOn()) {
+            int dozeEnable = Settings.Secure.getIntForUser(mContext.getContentResolver(),
+                Settings.Secure.DOZE_ENABLED, 0, UserHandle.USER_CURRENT);
+            int pressUdfpsMode = Settings.Secure.getIntForUser(mContext.getContentResolver(),
+                Settings.Secure.DOZE_PRESS_UDFPS_MODE, 0, UserHandle.USER_CURRENT);
+            Slog.w(TAG, "dozeEnable " + dozeEnable + " pressUdfpsType: " + pressUdfpsMode);
+            if (dozeEnable == 1) {
+                if (pressUdfpsMode == 1) {
+                    mContext.sendBroadcastAsUser(new Intent("com.android.systemui.doze.pulse"), 
+                    new UserHandle(UserHandle.USER_CURRENT)); 
+                }
+                else if (pressUdfpsMode == 2) {
+                    PowerManager.WakeLock wakeLock = powerManager.newWakeLock(
+                        PowerManager.PARTIAL_WAKE_LOCK,  "udfpsWakeLock");
+                    wakeLock.acquire(300);
+                    powerManager.wakeUp(SystemClock.uptimeMillis(),
+                            PowerManager.WAKE_REASON_GESTURE, TAG);
+                }
+            }
+        }       
+    }
+
     private void sendAcquiredResult(int acquireInfo, int vendorCode) {
         if (mAuthenticationCallback != null) {
             mAuthenticationCallback.onAuthenticationAcquired(acquireInfo);
         }
+        if (acquireInfo == 6 && (vendorCode == 60 || vendorCode == 22)) {
+            // fpc_fod: vendorCode 60
+            // goodix_fod: vendorCode 21
+            processUdfpsStatus();
+            return;
+        }
+
         final String msg = getAcquiredString(mContext, acquireInfo, vendorCode);
         if (msg == null) {
             return;
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index c18f75c41787..a6cd5c903aea 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -4597,6 +4597,15 @@ public final class Settings {
          */
         public static final int SCREEN_BRIGHTNESS_MODE_AUTOMATIC = 1;
 
+        /**
+         * Screen resolution mode.
+         *  0 = disable
+         *  1 = overlay size
+         * @hide
+         */
+        @Readable
+        public static final String SCREEN_RESOLUTION_MODE = "screen_resolution_mode";
+        
         /**
          * Control whether to enable adaptive sleep mode.
          * @deprecated Use {@link android.provider.Settings.Secure#ADAPTIVE_SLEEP} instead.
@@ -9125,6 +9134,17 @@ public final class Settings {
         @Readable
         public static final String DOZE_ALWAYS_ON = "doze_always_on";
 
+        /**
+         * Press udfps mode.
+         *  0 = disable
+         *  1 = wake screen
+         *  2 = wake phone
+         * @hide
+         */
+        @Readable
+        public static final String DOZE_PRESS_UDFPS_MODE =
+                "doze_press_udfps_mode";
+
         /**
          * Whether the device should pulse on pick up gesture.
          * @hide
diff --git a/packages/SettingsProvider/src/android/provider/settings/backup/SecureSettings.java b/packages/SettingsProvider/src/android/provider/settings/backup/SecureSettings.java
index f6a66c9cfd60..29d58218482b 100644
--- a/packages/SettingsProvider/src/android/provider/settings/backup/SecureSettings.java
+++ b/packages/SettingsProvider/src/android/provider/settings/backup/SecureSettings.java
@@ -109,6 +109,7 @@ public class SecureSettings {
         Settings.Secure.POWER_MENU_LOCKED_SHOW_CONTENT,
         Settings.Secure.DOZE_ENABLED,
         Settings.Secure.DOZE_ALWAYS_ON,
+        Settings.Secure.DOZE_PRESS_UDFPS_MODE,
         Settings.Secure.DOZE_PICK_UP_GESTURE,
         Settings.Secure.DOZE_DOUBLE_TAP_GESTURE,
         Settings.Secure.DOZE_TAP_SCREEN_GESTURE,
diff --git a/packages/SettingsProvider/src/android/provider/settings/validators/SecureSettingsValidators.java b/packages/SettingsProvider/src/android/provider/settings/validators/SecureSettingsValidators.java
index 00d08b3d2f84..acf2c996c356 100644
--- a/packages/SettingsProvider/src/android/provider/settings/validators/SecureSettingsValidators.java
+++ b/packages/SettingsProvider/src/android/provider/settings/validators/SecureSettingsValidators.java
@@ -162,6 +162,8 @@ public class SecureSettingsValidators {
         VALIDATORS.put(Secure.STATUS_BAR_SHOW_VIBRATE_ICON, BOOLEAN_VALIDATOR);
         VALIDATORS.put(Secure.DOZE_ENABLED, BOOLEAN_VALIDATOR);
         VALIDATORS.put(Secure.DOZE_ALWAYS_ON, BOOLEAN_VALIDATOR);
+        VALIDATORS.put(
+                Secure.DOZE_PRESS_UDFPS_MODE, new DiscreteValueValidator(new String[] {"0", "1", "2"}));
         VALIDATORS.put(Secure.DOZE_PICK_UP_GESTURE, BOOLEAN_VALIDATOR);
         VALIDATORS.put(Secure.DOZE_DOUBLE_TAP_GESTURE, BOOLEAN_VALIDATOR);
         VALIDATORS.put(Secure.DOZE_TAP_SCREEN_GESTURE, BOOLEAN_VALIDATOR);
diff --git a/packages/SettingsProvider/src/android/provider/settings/validators/SystemSettingsValidators.java b/packages/SettingsProvider/src/android/provider/settings/validators/SystemSettingsValidators.java
index b16a1088d5c1..38b7a8650138 100644
--- a/packages/SettingsProvider/src/android/provider/settings/validators/SystemSettingsValidators.java
+++ b/packages/SettingsProvider/src/android/provider/settings/validators/SystemSettingsValidators.java
@@ -113,6 +113,7 @@ public class SystemSettingsValidators {
         VALIDATORS.put(System.SCREEN_OFF_TIMEOUT, NON_NEGATIVE_INTEGER_VALIDATOR);
         VALIDATORS.put(System.SCREEN_BRIGHTNESS_FOR_VR, new InclusiveIntegerRangeValidator(0, 255));
         VALIDATORS.put(System.SCREEN_BRIGHTNESS_MODE, BOOLEAN_VALIDATOR);
+        VALIDATORS.put(System.SCREEN_RESOLUTION_MODE, NON_NEGATIVE_INTEGER_VALIDATOR);
         VALIDATORS.put(System.ADAPTIVE_SLEEP, BOOLEAN_VALIDATOR);
         VALIDATORS.put(System.MODE_RINGER_STREAMS_AFFECTED, NON_NEGATIVE_INTEGER_VALIDATOR);
         VALIDATORS.put(System.MUTE_STREAMS_AFFECTED, NON_NEGATIVE_INTEGER_VALIDATOR);
diff --git a/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java b/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java
index 5399d8b2ab1a..485dc03ca012 100644
--- a/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java
+++ b/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java
@@ -3944,9 +3944,9 @@ public class SettingsProvider extends ContentProvider {
                         secureSettings.insertSettingOverrideableByRestoreLocked(
                                 Settings.Secure.DOZE_PICK_UP_GESTURE, "0", null, true,
                                 SettingsState.SYSTEM_PACKAGE_NAME);
-                        secureSettings.insertSettingOverrideableByRestoreLocked(
-                                Settings.Secure.DOZE_DOUBLE_TAP_GESTURE, "0", null, true,
-                                SettingsState.SYSTEM_PACKAGE_NAME);
+                        // secureSettings.insertSettingOverrideableByRestoreLocked(
+                        //         Settings.Secure.DOZE_DOUBLE_TAP_GESTURE, "0", null, true,
+                        //         SettingsState.SYSTEM_PACKAGE_NAME);
                     }
                     currentVersion = 131;
                 }
diff --git a/packages/SystemUI/src/com/android/systemui/doze/DozeSensors.java b/packages/SystemUI/src/com/android/systemui/doze/DozeSensors.java
index 4c8f854d8f7b..2af2f94a9ea1 100644
--- a/packages/SystemUI/src/com/android/systemui/doze/DozeSensors.java
+++ b/packages/SystemUI/src/com/android/systemui/doze/DozeSensors.java
@@ -200,15 +200,15 @@ public class DozeSensors {
                         true /* immediatelyReRegister */,
                         false /* requiresAod */
                 ),
-                new TriggerSensor(
-                        findSensor(config.doubleTapSensorType()),
-                        Settings.Secure.DOZE_DOUBLE_TAP_GESTURE,
-                        true /* configured */,
-                        DozeLog.REASON_SENSOR_DOUBLE_TAP,
-                        dozeParameters.doubleTapReportsTouchCoordinates(),
-                        true /* touchscreen */,
-                        !dozeParameters.doubleTapNeedsProximityCheck() /* performsProxCheck */
-                ),
+                // new TriggerSensor(
+                //         findSensor(config.doubleTapSensorType()),
+                //         Settings.Secure.DOZE_DOUBLE_TAP_GESTURE,
+                //         true /* configured */,
+                //         DozeLog.REASON_SENSOR_DOUBLE_TAP,
+                //         dozeParameters.doubleTapReportsTouchCoordinates(),
+                //         true /* touchscreen */,
+                //         !dozeParameters.doubleTapNeedsProximityCheck() /* performsProxCheck */
+                // ),
                 new TriggerSensor(
                         findSensors(config.tapSensorTypeMapping()),
                         Settings.Secure.DOZE_TAP_SCREEN_GESTURE,
diff --git a/services/core/java/com/android/server/display/DisplayManagerService.java b/services/core/java/com/android/server/display/DisplayManagerService.java
index 909c531c5e92..470652fd6f0a 100644
--- a/services/core/java/com/android/server/display/DisplayManagerService.java
+++ b/services/core/java/com/android/server/display/DisplayManagerService.java
@@ -421,6 +421,7 @@ public final class DisplayManagerService extends SystemService {
 
     private SensorManager mSensorManager;
     private BrightnessTracker mBrightnessTracker;
+    private ResolutionSettings mResolutionSettings;
 
 
     // Whether minimal post processing is allowed by the user.
@@ -656,6 +657,7 @@ public final class DisplayManagerService extends SystemService {
         mHandler.sendEmptyMessage(MSG_REGISTER_ADDITIONAL_DISPLAY_ADAPTERS);
 
         mSettingsObserver = new SettingsObserver();
+        mResolutionSettings = new ResolutionSettings(mContext, mHandler);
 
         mBrightnessSynchronizer.startSynchronizing();
 
diff --git a/services/core/java/com/android/server/display/ResolutionSettings.java b/services/core/java/com/android/server/display/ResolutionSettings.java
new file mode 100644
index 000000000000..2a61c5eb2697
--- /dev/null
+++ b/services/core/java/com/android/server/display/ResolutionSettings.java
@@ -0,0 +1,83 @@
+/*
+ * Copyright (C) 2021 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.display;
+
+import android.content.Context;
+import android.content.ContentResolver;
+import android.database.ContentObserver;
+import android.net.Uri;
+import android.os.Handler;
+import android.os.RemoteException;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.util.Slog;
+
+import android.view.Display;
+import android.view.IWindowManager;
+import android.view.WindowManagerGlobal;
+
+public class ResolutionSettings {
+    private static final String TAG = "ResolutionSettings";
+    
+    private Context mContext;
+    private final Handler mHandler;
+    private SettingsObserver mSettingsObserver;
+
+    public ResolutionSettings(Context context, Handler handler) {
+        this.mContext = context;
+        this.mHandler = handler;
+
+        mSettingsObserver = new SettingsObserver();
+    }
+
+    private void updateScreenResolution() {
+        int resolutionMode = Settings.System.getIntForUser(mContext.getContentResolver(),
+            Settings.System.SCREEN_RESOLUTION_MODE, 0, UserHandle.USER_CURRENT);
+        try {
+            if (resolutionMode == 0) {
+                // mondrian
+                final IWindowManager wms = WindowManagerGlobal.getWindowManagerService();
+                int displayId = Display.DEFAULT_DISPLAY;
+                wms.clearForcedDisplaySize(displayId);
+                wms.clearForcedDisplayDensityForUser(displayId, UserHandle.USER_CURRENT);
+            } else if (resolutionMode == 1) {
+                // mondrian
+                final IWindowManager wms = WindowManagerGlobal.getWindowManagerService();
+                int displayId = Display.DEFAULT_DISPLAY;
+                wms.setForcedDisplaySize(displayId, 1080, 2400);
+                wms.setForcedDisplayDensityForUser(displayId, 420, UserHandle.USER_CURRENT);
+            }
+        } catch (RemoteException e) {
+            Slog.e(TAG, "Remote execution", e);
+        }
+    }
+
+    private class SettingsObserver extends ContentObserver {
+        SettingsObserver() {
+            super(mHandler);
+
+            mContext.getContentResolver().registerContentObserver(
+                    Settings.System.getUriFor(
+                        Settings.System.SCREEN_RESOLUTION_MODE), false, this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange, Uri uri) {
+            updateScreenResolution();
+        }
+    }
+}
diff --git a/services/core/java/com/android/server/dreams/DreamManagerService.java b/services/core/java/com/android/server/dreams/DreamManagerService.java
index 5b375d70e436..86124051a418 100644
--- a/services/core/java/com/android/server/dreams/DreamManagerService.java
+++ b/services/core/java/com/android/server/dreams/DreamManagerService.java
@@ -774,7 +774,7 @@ public final class DreamManagerService extends SystemService {
     private final ContentObserver mDozeEnabledObserver = new ContentObserver(null) {
         @Override
         public void onChange(boolean selfChange) {
-            writePulseGestureEnabled();
+            //writePulseGestureEnabled();
         }
     };
 
diff --git a/telecomm/java/android/telecom/Connection.java b/telecomm/java/android/telecom/Connection.java
index 49ad58550db8..dec6def806c6 100644
--- a/telecomm/java/android/telecom/Connection.java
+++ b/telecomm/java/android/telecom/Connection.java
@@ -896,6 +896,17 @@ public abstract class Connection extends Conferenceable {
      */
     public static final String EVENT_CALL_MERGE_FAILED = "android.telecom.event.CALL_MERGE_FAILED";
 
+    /**
+     * Connection event used to inform Telecom when a resume operation on a call has failed.
+     * This event is only sent when concurrent calls (DSDA) are possible
+     * <p>
+     * Sent via {@link #sendConnectionEvent(String, Bundle)}.  The {@link Bundle} parameter is
+     * expected to be null when this connection event is used.
+     * @hide
+     */
+    public static final String EVENT_CALL_RESUME_FAILED =
+            "android.telecom.event.CALL_RESUME_FAILED";
+
     /**
      * Connection event used to inform Telecom when a hold operation on a call has failed.
      * <p>
diff --git a/telephony/java/android/telephony/TelephonyManager.java b/telephony/java/android/telephony/TelephonyManager.java
index ecd8c7a3d917..6fa62413cdd6 100644
--- a/telephony/java/android/telephony/TelephonyManager.java
+++ b/telephony/java/android/telephony/TelephonyManager.java
@@ -561,6 +561,35 @@ public class TelephonyManager {
         }
     }
 
+    /**
+     * The allowed values for multi sim voice capability
+     *
+     * @hide
+     */
+    public interface MultiSimVoiceCapability {
+        /** default */
+        static final int UNKNOWN = 0;
+        /** Concurrent calls on both subscriptions are not possbile. */
+        static final int DSDS = 1;
+        /** Concurrent calls on both subscriptions are not possible but user will have option to
+         * accept MT call on one subscription when there is an ongoing call on another subscription.
+         */
+        static final int PSEUDO_DSDA = 2;
+        /** Concurrent calls on both subscriptions are possible */
+        static final int DSDA = 3;
+    }
+
+    /**
+     * Returns true if concurrent calls on both subscriptions are possible (ex: DSDA).
+     * Returns false for other cases.
+     */
+    /** {@hide} */
+    public static boolean isConcurrentCallsPossible() {
+        int mSimVoiceConfig = TelephonyProperties.multi_sim_voice_capability().orElse(
+                MultiSimVoiceCapability.UNKNOWN);
+        return mSimVoiceConfig == MultiSimVoiceCapability.DSDA;
+    }
+    
     /**
      * Returns the number of phones available.
      * Returns 0 if none of voice, sms, data is not supported

project frameworks/native/
diff --git a/services/vibratorservice/VibratorHalController.cpp b/services/vibratorservice/VibratorHalController.cpp
index c1795f5c32..b32c85270b 100644
--- a/services/vibratorservice/VibratorHalController.cpp
+++ b/services/vibratorservice/VibratorHalController.cpp
@@ -53,7 +53,8 @@ std::shared_ptr<HalWrapper> connectHal(std::shared_ptr<CallbackScheduler> schedu
         return nullptr;
     }
 
-    sp<Aidl::IVibrator> aidlHal = waitForVintfService<Aidl::IVibrator>();
+    sp<Aidl::IVibrator> aidlHal = waitForVintfService<Aidl::IVibrator>(String16("vibratorfeature"));
+    //sp<Aidl::IVibrator> aidlHal = waitForVintfService<Aidl::IVibrator>();
     if (aidlHal) {
         ALOGV("Successfully connected to Vibrator HAL AIDL service.");
         return std::make_shared<AidlHalWrapper>(std::move(scheduler), aidlHal);

project packages/apps/Settings/
diff --git a/src/com/android/settings/gestures/ScreenOffUdfpsPreferenceController.java b/src/com/android/settings/gestures/ScreenOffUdfpsPreferenceController.java
index 1d6fa8a870..ecd033b689 100644
--- a/src/com/android/settings/gestures/ScreenOffUdfpsPreferenceController.java
+++ b/src/com/android/settings/gestures/ScreenOffUdfpsPreferenceController.java
@@ -63,12 +63,13 @@ public class ScreenOffUdfpsPreferenceController extends GesturePreferenceControl
 
     @Override
     public int getAvailabilityStatus() {
-        // No hardware support for Screen-Off UDFPS
-        if (!screenOffUdfpsAvailable(mContext, getAmbientConfig())) {
-            return UNSUPPORTED_ON_DEVICE;
-        }
+        return UNSUPPORTED_ON_DEVICE;
+        // // No hardware support for Screen-Off UDFPS
+        // if (!screenOffUdfpsAvailable(mContext, getAmbientConfig())) {
+        //     return UNSUPPORTED_ON_DEVICE;
+        // }
 
-        return AVAILABLE;
+        // return AVAILABLE;
     }
 
     @Override

project packages/modules/Bluetooth/
diff --git a/android/app/src/com/android/bluetooth/hfp/HeadsetService.java b/android/app/src/com/android/bluetooth/hfp/HeadsetService.java
index 856f7dde04..90309cc39b 100644
--- a/android/app/src/com/android/bluetooth/hfp/HeadsetService.java
+++ b/android/app/src/com/android/bluetooth/hfp/HeadsetService.java
@@ -946,6 +946,16 @@ public class HeadsetService extends ProfileService {
                 receiver.propagateException(e);
             }
         }
+
+        @Override
+        public void phoneStateChangedDsDa(int numActive, int numHeld, int callState, String number,
+                                          int type, String name, AttributionSource source) {
+        }
+
+        @Override
+        public void clccResponseDsDa(int index, int direction, int status, int mode, boolean mpty,
+                                     String number, int type, AttributionSource source) {
+        }
     }
 
     // API methods
diff --git a/framework/java/android/bluetooth/BluetoothHeadset.java b/framework/java/android/bluetooth/BluetoothHeadset.java
index 403a8a8ec1..0c63950361 100644
--- a/framework/java/android/bluetooth/BluetoothHeadset.java
+++ b/framework/java/android/bluetooth/BluetoothHeadset.java
@@ -1427,4 +1427,59 @@ public final class BluetoothHeadset implements BluetoothProfile {
     private static void log(String msg) {
         Log.d(TAG, msg);
     }
+
+     /**
+     * Notify Headset of phone state change.
+     * This is a backdoor for phone app to call BluetoothHeadset since
+     * there is currently not a good way to get precise call state change outside
+     * of phone app.
+     *
+     * @hide
+     */
+    @RequiresBluetoothConnectPermission
+    @RequiresPermission(allOf = {
+            android.Manifest.permission.BLUETOOTH_CONNECT,
+            android.Manifest.permission.MODIFY_PHONE_STATE,
+    })
+    public void phoneStateChangedDsDa(int numActive, int numHeld, int callState, String number,
+            int type, String name) {
+        final IBluetoothHeadset service = getService();
+        if (service != null && isEnabled()) {
+            try {
+                service.phoneStateChangedDsDa(numActive, numHeld, callState, number, type, name,
+                        mAttributionSource);
+            } catch (RemoteException e) {
+                Log.e(TAG, e.toString());
+            }
+        } else {
+            Log.w(TAG, "Proxy not attached to service");
+            if (DBG) Log.d(TAG, Log.getStackTraceString(new Throwable()));
+        }
+    }
+
+    /**
+     * Send Headset of CLCC response
+     *
+     * @hide
+     */
+    @RequiresBluetoothConnectPermission
+    @RequiresPermission(allOf = {
+            android.Manifest.permission.BLUETOOTH_CONNECT,
+            android.Manifest.permission.MODIFY_PHONE_STATE,
+    })
+    public void clccResponseDsDa(int index, int direction, int status, int mode, boolean mpty,
+            String number, int type) {
+        final IBluetoothHeadset service = getService();
+        if (service != null && isEnabled()) {
+            try {
+                service.clccResponseDsDa(index, direction, status, mode, mpty, number, type,
+                        mAttributionSource);
+            } catch (RemoteException e) {
+                Log.e(TAG, e.toString());
+            }
+        } else {
+            Log.w(TAG, "Proxy not attached to service");
+            if (DBG) Log.d(TAG, Log.getStackTraceString(new Throwable()));
+        }
+    }
 }
diff --git a/system/audio_hal_interface/hidl/codec_status_hidl.cc b/system/audio_hal_interface/hidl/codec_status_hidl.cc
index 3a1db42326..11f892d7b9 100644
--- a/system/audio_hal_interface/hidl/codec_status_hidl.cc
+++ b/system/audio_hal_interface/hidl/codec_status_hidl.cc
@@ -494,6 +494,16 @@ bool UpdateOffloadingCapabilities(
       case BTAV_A2DP_CODEC_INDEX_SOURCE_LDAC:
         codec_type_masks |= CodecType::LDAC;
         break;
+      case BTAV_A2DP_CODEC_INDEX_SOURCE_LC3:
+        LOG(WARNING) << __func__
+                     << ": Ignore source codec_type=" << preference.codec_type
+                     << ", not supported on HIDL";
+        break;
+      case BTAV_A2DP_CODEC_INDEX_SOURCE_OPUS:
+        LOG(WARNING) << __func__
+                     << ": Ignore source codec_type=" << preference.codec_type
+                     << ", not supported on HIDL";
+        break;
       case BTAV_A2DP_CODEC_INDEX_SINK_SBC:
         [[fallthrough]];
       case BTAV_A2DP_CODEC_INDEX_SINK_AAC:
diff --git a/system/binder/android/bluetooth/IBluetoothHeadset.aidl b/system/binder/android/bluetooth/IBluetoothHeadset.aidl
index 3e9474c99a..4b32456184 100644
--- a/system/binder/android/bluetooth/IBluetoothHeadset.aidl
+++ b/system/binder/android/bluetooth/IBluetoothHeadset.aidl
@@ -101,4 +101,8 @@ interface IBluetoothHeadset {
     oneway void isNoiseReductionSupported(in BluetoothDevice device, in AttributionSource attributionSource, in SynchronousResultReceiver receiver);
     @JavaPassthrough(annotation="@android.annotation.RequiresPermission(android.Manifest.permission.BLUETOOTH_CONNECT)")
     oneway void isVoiceRecognitionSupported(in BluetoothDevice device, in AttributionSource attributionSource, in SynchronousResultReceiver receiver);
+    @JavaPassthrough(annotation="@android.annotation.RequiresPermission(allOf={android.Manifest.permission.BLUETOOTH_CONNECT,android.Manifest.permission.MODIFY_PHONE_STATE})")
+    oneway void phoneStateChangedDsDa(int numActive, int numHeld, int callState, String number, int type, String name, in AttributionSource attributionSource);
+    @JavaPassthrough(annotation="@android.annotation.RequiresPermission(allOf={android.Manifest.permission.BLUETOOTH_CONNECT,android.Manifest.permission.MODIFY_PHONE_STATE})")
+    void clccResponseDsDa(int index, int direction, int status, int mode, boolean mpty, String number, int type, in AttributionSource attributionSource);
 }

project system/libsysprop/
diff --git a/srcs/android/sysprop/TelephonyProperties.sysprop b/srcs/android/sysprop/TelephonyProperties.sysprop
index 15999e7..eb64ff5 100644
--- a/srcs/android/sysprop/TelephonyProperties.sysprop
+++ b/srcs/android/sysprop/TelephonyProperties.sysprop
@@ -468,3 +468,15 @@ prop {
     access: Readonly
     prop_name: "ro.telephony.sim_slots.count"
 }
+
+#
+# System property which is used to store multi sim voice capability.
+# Possible values {@link TelephonyManager#MultiSimVoiceCapability}.
+#
+prop {
+    api_name: "multi_sim_voice_capability"
+    type: Integer
+    scope: Internal
+    access: ReadWrite
+    prop_name: "ril.multisim.voice_capability"
+}
\ No newline at end of file
